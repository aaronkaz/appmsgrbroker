// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: appmessage/service.proto

package appmessage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppMessageService_GetClusterState_FullMethodName    = "/appmessage.AppMessageService/GetClusterState"
	AppMessageService_RegisterNode_FullMethodName       = "/appmessage.AppMessageService/RegisterNode"
	AppMessageService_StreamClusterState_FullMethodName = "/appmessage.AppMessageService/StreamClusterState"
)

// AppMessageServiceClient is the client API for AppMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppMessageServiceClient interface {
	GetClusterState(ctx context.Context, in *ClusterDiscoveryRequest, opts ...grpc.CallOption) (*ClusterDiscoveryResponse, error)
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	StreamClusterState(ctx context.Context, opts ...grpc.CallOption) (AppMessageService_StreamClusterStateClient, error)
}

type appMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppMessageServiceClient(cc grpc.ClientConnInterface) AppMessageServiceClient {
	return &appMessageServiceClient{cc}
}

func (c *appMessageServiceClient) GetClusterState(ctx context.Context, in *ClusterDiscoveryRequest, opts ...grpc.CallOption) (*ClusterDiscoveryResponse, error) {
	out := new(ClusterDiscoveryResponse)
	err := c.cc.Invoke(ctx, AppMessageService_GetClusterState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMessageServiceClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, AppMessageService_RegisterNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMessageServiceClient) StreamClusterState(ctx context.Context, opts ...grpc.CallOption) (AppMessageService_StreamClusterStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppMessageService_ServiceDesc.Streams[0], AppMessageService_StreamClusterState_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &appMessageServiceStreamClusterStateClient{stream}
	return x, nil
}

type AppMessageService_StreamClusterStateClient interface {
	Send(*ClusterDiscoveryRequest) error
	Recv() (*ClusterDiscoveryResponse, error)
	grpc.ClientStream
}

type appMessageServiceStreamClusterStateClient struct {
	grpc.ClientStream
}

func (x *appMessageServiceStreamClusterStateClient) Send(m *ClusterDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *appMessageServiceStreamClusterStateClient) Recv() (*ClusterDiscoveryResponse, error) {
	m := new(ClusterDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppMessageServiceServer is the server API for AppMessageService service.
// All implementations must embed UnimplementedAppMessageServiceServer
// for forward compatibility
type AppMessageServiceServer interface {
	GetClusterState(context.Context, *ClusterDiscoveryRequest) (*ClusterDiscoveryResponse, error)
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	StreamClusterState(AppMessageService_StreamClusterStateServer) error
	mustEmbedUnimplementedAppMessageServiceServer()
}

// UnimplementedAppMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppMessageServiceServer struct {
}

func (UnimplementedAppMessageServiceServer) GetClusterState(context.Context, *ClusterDiscoveryRequest) (*ClusterDiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterState not implemented")
}
func (UnimplementedAppMessageServiceServer) RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedAppMessageServiceServer) StreamClusterState(AppMessageService_StreamClusterStateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamClusterState not implemented")
}
func (UnimplementedAppMessageServiceServer) mustEmbedUnimplementedAppMessageServiceServer() {}

// UnsafeAppMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppMessageServiceServer will
// result in compilation errors.
type UnsafeAppMessageServiceServer interface {
	mustEmbedUnimplementedAppMessageServiceServer()
}

func RegisterAppMessageServiceServer(s grpc.ServiceRegistrar, srv AppMessageServiceServer) {
	s.RegisterService(&AppMessageService_ServiceDesc, srv)
}

func _AppMessageService_GetClusterState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMessageServiceServer).GetClusterState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppMessageService_GetClusterState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMessageServiceServer).GetClusterState(ctx, req.(*ClusterDiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMessageService_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMessageServiceServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppMessageService_RegisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMessageServiceServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMessageService_StreamClusterState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppMessageServiceServer).StreamClusterState(&appMessageServiceStreamClusterStateServer{stream})
}

type AppMessageService_StreamClusterStateServer interface {
	Send(*ClusterDiscoveryResponse) error
	Recv() (*ClusterDiscoveryRequest, error)
	grpc.ServerStream
}

type appMessageServiceStreamClusterStateServer struct {
	grpc.ServerStream
}

func (x *appMessageServiceStreamClusterStateServer) Send(m *ClusterDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *appMessageServiceStreamClusterStateServer) Recv() (*ClusterDiscoveryRequest, error) {
	m := new(ClusterDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppMessageService_ServiceDesc is the grpc.ServiceDesc for AppMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appmessage.AppMessageService",
	HandlerType: (*AppMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterState",
			Handler:    _AppMessageService_GetClusterState_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _AppMessageService_RegisterNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamClusterState",
			Handler:       _AppMessageService_StreamClusterState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "appmessage/service.proto",
}
